<context>
# Overview

CKBoost is an existing gamified community engagement platform for the CKB ecosystem that has been under active development as part of the Nervos Community Catalyst initiative. The platform currently has smart contracts deployed on testnet (ckboost-protocol-type v0.0.26 and ckboost-campaign-type v20250804-2157) and a Next.js dApp in development. The project has received $20,000 USD funding from the CKB Community Fund DAO and is progressing through its first milestone.

The platform addresses the challenge of transforming scattered community efforts into structured, measurable engagement by providing a comprehensive reward system for content creation, development contributions, and educational activities. It implements a unique decentralized architecture where all contract addresses are stored on-chain in a protocol cell, enabling dynamic updates without redeploying the dApp.

CKBoost is valuable as the technical backbone for the Nervos Community Catalyst, creating pathways for both technical and non-technical community members to contribute meaningfully while earning on-chain rewards through a transparent, gamified system.

# Core Features

## Existing Implementation Status

### Smart Contract Architecture (Partially Deployed)
- **Protocol Type Contract**: Deployed on testnet (v0.0.26), manages governance and protocol configuration
- **Campaign Type Contract**: Deployed on testnet (v20250804-2157), handles campaign logic and quest management
- **Protocol Lock Contract**: Designed but not yet deployed, will handle protocol governance permissions
- **Campaign Lock Contract**: Designed but not yet deployed, will secure campaign fund vaults
- **User Type Contract**: Designed but not yet deployed, will manage user verification and bindings

### dApp Frontend (In Development)
- **Next.js 15 Application**: Scaffolded with App Router and TypeScript
- **Wallet Integration**: CCC (Common Chain Connector) integration implemented
- **UI Components**: Full shadcn/ui component library integrated
- **Page Structure**: All major routes created (dashboard, campaigns, quests, admin panels)
- **Mock Data Layer**: Service abstraction layer with mock campaigns for development

### Protocol Registry Pattern (Implemented)
- **Single Source of Truth**: Protocol cell stores all contract addresses on-chain
- **Dynamic Configuration**: Contract addresses can be updated without redeploying dApp
- **Network Flexibility**: Different networks can have different contract configurations
- **Minimal Environment Variables**: Only protocol type script needed in configuration

## Features to Complete

### Campaign & Quest System
- **Campaign Creation Flow**: UI exists but needs blockchain integration
- **Quest Management**: Backend logic for quest lifecycle management
- **Proof Submission**: System for handling various proof types (links, files, transaction hashes)
- **Review Workflow**: Admin review interface and approval mechanisms
- **Progress Tracking**: Real-time monitoring of quest completion status

### Reward & Gamification
- **Points UDT**: Native on-chain points token implementation
- **Multi-Token Support**: CKB, SPORE, and other UDT reward distribution
- **Leaderboards**: Dynamic ranking system with period-based competitions
- **Achievement System**: Badges, streaks, and difficulty multipliers
- **Reward Distribution**: Automated payout mechanisms upon quest completion

### Identity & Verification
- **Manual Review**: Initial MVP verification through admin interface
- **Telegram Integration**: Proof-of-identity through Telegram bot
- **Future Methods**: DID and KYC provider integration planned
- **Locked Rewards**: System to hold rewards until verification completes
- **Privacy Protection**: Minimal data storage with encrypted status

### Community Features
- **Tipping System**: Peer-to-peer recognition with approval workflow
- **Treasury Integration**: Automated payouts from community funds
- **Social Features**: Activity feeds and user interactions
- **Contribution Records**: Permanent on-chain achievement history

# User Experience

## Current User Flows

### Implemented UI Flows
1. **Wallet Connection**: Users can connect CKB wallets through CCC
2. **Campaign Browsing**: Mock campaigns displayed with filtering options
3. **Quest Details**: Individual quest pages with requirements display
4. **Admin Dashboards**: Platform and campaign admin interfaces created
5. **User Profiles**: Basic profile pages with wallet information

### Missing Integration Points
1. **On-Chain Data**: Currently using mock data instead of blockchain queries
2. **Transaction Building**: No actual blockchain transactions implemented
3. **Real-Time Updates**: Need WebSocket/polling for chain state changes
4. **Error Handling**: Blockchain-specific error states not implemented
5. **Loading States**: Transaction confirmation UI not built

## Technical Debt & Improvements Needed

### Smart Contract Gaps
- Missing lock contracts (protocol-lock, campaign-lock, user-type)
- No integration tests between contracts
- Transaction recipes need implementation in TypeScript
- Cell collection and indexing logic incomplete

### Frontend Technical Debt
- Mock service layer needs blockchain implementation
- Type definitions incomplete for Molecule-generated structures
- No caching strategy for on-chain data
- Missing transaction builder utilities
- WebSocket connections for real-time updates not implemented

### Infrastructure Requirements
- Deployment scripts only cover contract deployment, not protocol cell
- No automated testing pipeline for contracts
- Missing monitoring and analytics integration
- Serverless functions for proof validation not implemented
</context>
<PRD>
# Technical Architecture

## Current System Architecture

### Deployed Smart Contracts
1. **ckboost-protocol-type (v0.0.26)**
   - Type Hash: `0x8bed7ce362f1817292c0173ce9854ec359f3bca621882618d28392643f58c6c6`
   - Manages protocol configuration and governance rules
   - Stores whitelisted sponsors and admin addresses
   - Controls Points UDT minting permissions

2. **ckboost-campaign-type (v20250804-2157)**
   - Type Hash: `0x13705606186b868f80c8f0af5b05a1e9a43d3ea08dcd9d51d60cc7c70faf4f67`
   - Handles campaign lifecycle and quest definitions
   - Manages participation rules and proof requirements
   - Controls reward distribution logic

### Frontend Architecture (Next.js 15)
- **Framework**: Next.js with App Router, TypeScript, Tailwind CSS
- **Components**: 
  - Full shadcn/ui component library integrated
  - Custom components for campaigns, quests, admin panels
  - Wallet connection through @ckb-ccc/connector-react
- **State Management**: React Context for wallet and mock data
- **Service Layer**: Abstracted to support both mock and blockchain data

### Data Storage Strategy
- **On-Chain Primary**: Protocol settings, campaign data, user achievements
- **Cell Data Structure**: Using Molecule schema for type-safe serialization
- **Off-Chain References**: IPFS for proof content, local storage for preferences
- **No Backend Servers**: Fully decentralized architecture planned

## Required Technical Implementations

### Smart Contract Completions
1. **ckboost-protocol-lock**
   - Authentication for protocol updates
   - Multi-signature support for governance
   - Time-locked operations for security

2. **ckboost-campaign-lock**
   - Secure vault for campaign reward pools
   - Escrow logic for fund protection
   - Authorization for reward distribution

3. **ckboost-user-type**
   - User profile and verification status
   - Quest submission records
   - Social platform bindings

### Frontend Blockchain Integration
1. **CKB Service Implementation**
   - Replace mock services with actual blockchain queries
   - Implement cell collection and filtering logic
   - Add transaction building for all user actions
   - Create caching layer for performance

2. **Real-Time Updates**
   - WebSocket connection for chain state monitoring
   - Event-driven UI updates for transactions
   - Optimistic updates with rollback on failure

3. **Transaction Builders**
   - Campaign creation transactions
   - Quest completion submissions
   - Reward claim transactions
   - Verification status updates

### Infrastructure Components
1. **Serverless Functions**
   - Proof validation workers
   - IPFS pinning services
   - Notification dispatchers
   - Cache synchronization

2. **Indexing Services**
   - Real-time cell indexing
   - Historical data aggregation
   - Leaderboard calculations
   - Analytics data processing

# Development Roadmap

## Phase 1: Complete Core Infrastructure (Current - 4 weeks)

### Week 1-2: Smart Contract Completion
- Deploy remaining contracts (protocol-lock, campaign-lock, user-type)
- Implement cross-contract integration tests
- Create TypeScript bindings for all contracts
- Deploy and verify on testnet

### Week 3-4: Frontend Blockchain Integration
- Replace mock services with blockchain implementations
- Implement transaction builders for core flows
- Add real-time chain state monitoring
- Create error handling and retry logic

## Phase 2: Feature Implementation (Weeks 5-8)

### Week 5-6: Campaign & Quest System
- Complete campaign creation flow with on-chain storage
- Implement quest participation and proof submission
- Build admin review interface with blockchain updates
- Add progress tracking and status management

### Week 7-8: Reward & Verification System
- Implement Points UDT minting logic
- Create reward distribution mechanisms
- Build manual verification workflow
- Add reward locking until verification

## Phase 3: Advanced Features (Weeks 9-12)

### Week 9-10: Community Features
- Implement tipping system with approval workflow
- Add treasury integration for automated payouts
- Create user activity feeds
- Build achievement display system

### Week 11-12: Polish & Launch Preparation
- Performance optimization and caching
- Comprehensive testing across all flows
- Documentation and user guides
- Beta testing with community members

# Logical Dependency Chain

## Foundation Layer (Must Complete First)
1. **Smart Contract Deployment**
   - Deploy remaining contracts to testnet
   - Verify all contract interactions work correctly
   - Create comprehensive test suite

2. **Protocol Cell Initialization**
   - Deploy protocol cell with all contract addresses
   - Update dApp configuration with protocol cell args
   - Verify contract discovery through protocol cell

3. **Core Blockchain Services**
   - Implement CKB client wrapper
   - Create transaction builder utilities
   - Add cell collection and filtering
   - Implement error handling

## Integration Layer (Depends on Foundation)
4. **Campaign Management Integration**
   - Connect campaign UI to blockchain
   - Implement campaign cell creation
   - Add quest definition storage
   - Enable sponsor whitelisting

5. **User Flow Integration**
   - Wallet connection and authentication
   - Quest participation transactions
   - Proof submission to chain
   - Progress tracking implementation

6. **Reward System Integration**
   - Points UDT minting setup
   - Reward pool management
   - Distribution mechanisms
   - Claim workflows

## Enhancement Layer (Builds on Integration)
7. **Verification System**
   - Manual review interface
   - Verification record storage
   - Reward locking logic
   - Status management

8. **Community Features**
   - Tipping proposal system
   - Approval workflows
   - Treasury integration
   - Social features

## Optimization Layer (Final Polish)
9. **Performance & Caching**
   - Implement caching strategies
   - Optimize chain queries
   - Add loading states
   - Improve responsiveness

10. **Testing & Documentation**
    - End-to-end test coverage
    - User documentation
    - Developer guides
    - Deployment procedures

# Risks and Mitigations

## Technical Risks

### Smart Contract Integration Complexity
- **Risk**: Complex interactions between multiple contracts may have unforeseen issues
- **Current State**: Only 2 of 5 contracts deployed, integration untested
- **Mitigation**: Comprehensive integration test suite, gradual rollout with limited funds, formal verification of critical paths

### Performance at Scale
- **Risk**: Chain queries may be slow with many campaigns and users
- **Current State**: No caching or optimization implemented
- **Mitigation**: Implement aggressive caching, use indexer services, optimize cell structures for efficient queries

### WebSocket Reliability
- **Risk**: Real-time updates may be unreliable across different network conditions
- **Current State**: No WebSocket implementation exists
- **Mitigation**: Implement fallback polling, retry logic, and graceful degradation

## Migration Risks

### Data Migration from Mock to Blockchain
- **Risk**: Existing mock data structure may not map cleanly to blockchain
- **Current State**: Mock data layer fully implemented but disconnected from chain
- **Mitigation**: Create migration scripts, maintain backward compatibility, gradual feature rollout

### User Experience Disruption
- **Risk**: Blockchain integration may slow down previously instant operations
- **Current State**: Users accustomed to instant mock responses
- **Mitigation**: Implement optimistic updates, clear loading states, transaction status tracking

### Breaking Changes
- **Risk**: Contract updates may break existing functionality
- **Current State**: Contracts still being upgraded (26 versions of protocol-type)
- **Mitigation**: Comprehensive testing before deployment, version compatibility checks, rollback procedures

## Resource Constraints

### Development Timeline
- **Risk**: 3-month timeline may be insufficient for full implementation
- **Current State**: ~1 month into development with core infrastructure incomplete
- **Mitigation**: Prioritize MVP features, defer advanced features, focus on critical path

### Testing Coverage
- **Risk**: Insufficient testing may lead to production issues
- **Current State**: No integration tests, limited unit tests
- **Mitigation**: Implement CI/CD pipeline, require test coverage metrics, beta testing period

### Community Adoption
- **Risk**: Complex verification may deter user participation
- **Current State**: Verification system not implemented
- **Mitigation**: Start with simple manual verification, clear onboarding guides, community ambassadors

# Appendix

## Current Project Status

### Completed Components
- Smart contract architecture design
- Protocol and campaign type contracts deployed
- Frontend scaffold with all major routes
- UI component library integration
- Wallet connection implementation
- Mock data service layer

### In-Progress Work
- Remaining smart contract deployment
- Blockchain service implementation
- Transaction builder development
- Real-time update system

### Technical Debt Inventory
- No integration tests between contracts
- Mock services need complete replacement
- Missing TypeScript types for chain data
- No caching strategy implemented
- WebSocket infrastructure not built
- Deployment automation incomplete

## Migration Strategy

### Phase 1: Parallel Development
- Maintain mock data layer while building blockchain services
- Feature flag for switching between mock and chain data
- Gradual migration of individual features

### Phase 2: Integration Testing
- Deploy to testnet with limited users
- Run mock and chain versions in parallel
- Validate data consistency

### Phase 3: Production Migration
- Deploy all contracts to mainnet
- Migrate user data if applicable
- Full cutover to blockchain backend

## Technical Specifications

### Performance Requirements
- Page load: <3 seconds with chain data
- Transaction confirmation: <30 seconds
- Real-time updates: <5 second delay
- Caching: 5-minute TTL for most data

### Security Requirements
- Multi-signature for protocol updates
- Time locks on critical operations
- Comprehensive audit before mainnet
- Rate limiting on API endpoints

### Scalability Targets
- Support 10,000+ active users
- Handle 100+ concurrent campaigns
- Process 1,000+ daily transactions
- Maintain sub-second query times
</PRD>