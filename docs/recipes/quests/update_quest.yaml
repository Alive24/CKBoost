# Quest Completion Transaction Skeleton  
# SSRI Method: complete_quest(quest_id, completion_proof, user_info)
# Handles quest completion with mixed reward distribution (CKB + NFT + UDT) in single transaction

Inputs:
  quest-cell:
    lock: ckboost-campaign-lock
      args: <campaign_creator_hash>
      rules: Quest cell with escrowed rewards
    type: ckboost-campaign-type
      args: <quest_type_args>
      rules: Must be an active quest with available rewards
    data: <QuestData: id, campaign_id, creator, requirements, asset_rewards[mixed CKB/NFT/UDT], status=active>
    capacity: <quest_operational_capacity>
    
  # Optional: CKB reward escrow (if CKB rewards exist)
  ckb-reward-escrow:
    lock: ckboost-campaign-lock
      args: <campaign_creator_hash>
      rules: CKB capacity held in escrow for reward distribution (optional)
    type: null
      args: null
      rules: CKB capacity to be distributed as reward (optional)
    data: null
    capacity: <ckb_reward_amount>
    
  # Optional: NFT reward escrow cells (if NFT rewards exist)
  nft-escrow-cells:
    lock: ckboost-campaign-lock
      args: <campaign_creator_hash>
      rules: NFT assets held in escrow for reward distribution (optional)
    type: spore
      args: <nft_type_args>
      rules: NFT assets to be distributed as rewards (optional)
    data: <Spore NFT data>
    capacity: <nft_occupied_capacity>
    
  # Optional: UDT reward escrow cells (if UDT rewards exist)
  udt-escrow-cells:
    lock: ckboost-campaign-lock
      args: <campaign_creator_hash>
      rules: UDT assets held in escrow for reward distribution (optional)
    type: xudt
      args: <udt_type_args>
      rules: UDT assets to be distributed as rewards (optional)
    data: <uint128: UDT amount>
    capacity: <udt_occupied_capacity>
    
  user-verification-cell:
    lock: ckboost-protocol-lock
      args: <protocol_lock_args>
      rules: User verification for completion validation and reputation update
    type: ckboost-protocol-type
      args: <user_verification_type_args>
      rules: Contains user verification data
    data: <UserVerificationData: user_id, verification_level, reputation_score, participation_history>
    capacity: <verification_occupied_capacity>

Outputs:
  completed-quest-cell:
    lock: ckboost-campaign-lock
      args: <campaign_creator_hash>
      rules: Same lock as input quest cell
    type: ckboost-campaign-type
      args: <quest_type_args>
      rules: Must maintain quest invariants and mark as completed
    data: <QuestData: id, campaign_id, creator, requirements, asset_rewards, status=completed, funding_required, created_at, completed_at>
    capacity: <reduced_quest_capacity>
    
  # Optional: CKB reward to user (if CKB rewards exist)
  user-ckb-reward:
    lock: secp256k1_blake160
      args: <user_lock_hash>
      rules: CKB reward distributed to completing user (optional)
    type: null
      args: null
      rules: CKB capacity reward for quest completion (optional)
    data: null
    capacity: <ckb_reward_amount>
    
  # Optional: NFT reward to user (if NFT rewards exist)
  user-nft-rewards:
    lock: secp256k1_blake160
      args: <user_lock_hash>
      rules: NFT assets distributed to completing user (optional)
    type: spore
      args: <nft_type_args>
      rules: NFT assets transferred to user ownership (optional)
    data: <Spore NFT data>
    capacity: <nft_occupied_capacity>
    
  # Optional: UDT reward to user (if UDT rewards exist)
  user-udt-rewards:
    lock: secp256k1_blake160
      args: <user_lock_hash>
      rules: UDT assets distributed to completing user (optional)
    type: xudt
      args: <udt_type_args>
      rules: UDT assets transferred to user ownership (optional)
    data: <uint128: UDT amount>
    capacity: <udt_occupied_capacity>
    
  updated-user-verification:
    lock: ckboost-protocol-lock
      args: <protocol_lock_args>
      rules: User verification with updated reputation and completion record
    type: ckboost-protocol-type
      args: <user_verification_type_args>
      rules: Contains updated user verification with quest completion
    data: <UserVerificationData: user_id, verification_level, increased_reputation_score, updated_participation_history>
    capacity: <verification_occupied_capacity>
    
  # Optional: Change cell (if excess capacity from reward distribution)
  change-cell:
    lock: ckboost-campaign-lock
      args: <campaign_creator_hash>
      rules: Returns any excess capacity to campaign (optional)
    type: null
      args: null
      rules: Standard change cell for excess capacity (optional)
    data: null
    capacity: <excess_capacity>

HeaderDeps:
  recent-header:
    Required for transaction validity window and quest completion timestamp

CellDeps:
  ckboost-campaign-type-dep:
    Required for quest type script execution and validation
    
  ckboost-campaign-lock-dep:
    Required for campaign lock script validation and reward authorization
    
  ckboost-protocol-type-dep:
    Required for user verification type script execution
    
  spore-type-dep:
    Required for NFT type script execution and validation (if NFT rewards exist)
    
  xudt-type-dep:
    Required for UDT type script execution and validation (if UDT rewards exist)
    
  secp256k1-dep:
    Required for user signature verification

Witnesses:
  0: <quest_completion_proof: evidence of quest requirement fulfillment and user eligibility>
  1: <user_signature: signs transaction hash for reward claim authorization>
  2: <reward_distribution_validation: proof of correct reward calculation and distribution>
  3: <reputation_update_data: user reputation and verification level updates>
