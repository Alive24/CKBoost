# Campaign Funding Transaction Skeleton
# SSRI Method: update_campaign(campaign_id, ckb_amount?, nft_assets?, udt_assets?)
# Allows adding additional funding to existing campaigns with mixed asset types

Inputs:
  campaign-cell:
    lock: ckboost-campaign-lock
      args: <campaign_creator_lock_hash>
      rules: Give admin to campaign creator
    type: ckboost-campaign-type
      args: <ckboost-protocol-cell-type-hash> + <Type ID>
      rules: Type script validates campaign operations
    data: <CampaignData: id, creator, metadata, funding_info(target_amount, initial_amount, funding_deadline, min_threshold), quest_count=0, status=funding, created_at, activated_at=0>
    
  creator-cell:
    lock: creator_lock
      args: <creator_lock_hash>
      rules: 
        - Must be signed by campaign creator.
        - Must be the same as the creator lock hash in the campaign cell.
    type: null
      args: null
      rules: Standard CKB cell for campaign update and optional additional funding
    data: null
    capacity: <campaign_update_fee + optional_additional_funding + transaction_fees>
    
  # Optional: NFT assets to add to campaign funding
  nft-funding-cells:
    lock: creator_lock
      args: <creator_lock_hash>
      rules: Optional NFT assets for campaign funding (if provided)
    type: spore
      args: <nft_type_args>
    data: <Spore NFT data>
    capacity: <nft_occupied_capacity>
    
  # Optional: UDT assets to add to campaign funding
  udt-funding-cells:
    lock: creator_lock
      args: <creator_lock_hash>
      rules: Optional UDT assets for campaign funding (if provided)
    type: xudt
      args: <udt_type_args>
    data: <uint128: UDT amount>
    capacity: <udt_occupied_capacity>

Outputs:
  updated-campaign-cell:
    lock: ckboost-campaign-lock
      args: <campaign_creator_lock_hash>
      rules: Give admin to campaign creator
    type: ckboost-campaign-type
      args: <ckboost-protocol-cell-type-hash> + <Type ID>
      rules: 
        - Update funding info
        - Status changes to "active" if target reached
        - If no campaign cell in output any more (closing event), return excess funding to creator but keep the data.
    data: <CampaignData: id, creator, metadata, updated_funding_info(increased_current_amount), quest_count, updated_status, created_at, updated_activated_at>
    capacity: <new_occupied_capacity>
    
  # Optional: NFT assets transferred to campaign control
  nft-campaign-cells:
    lock: ckboost-campaign-lock
      args: <campaign-cell-type-hash>
      rules: NFT assets now controlled by campaign (if NFTs provided)
    type: spore
      args: <nft_type_args>
      rules: Same NFT type as input, now under campaign control
    data: <Spore NFT data>
    capacity: <nft_occupied_capacity>
    
  # Optional: UDT assets transferred to campaign control
  udt-campaign-cells:
    lock: ckboost-campaign-lock
      args: <campaign-cell-type-hash>
      rules: UDT assets now controlled by campaign (if UDTs provided)
    type: xudt
      args: <udt_type_args>
      rules: Same UDT type as input, now under campaign control
    data: <uint128: UDT amount>
    capacity: <udt_occupied_capacity>
    
  change-cell:
    lock: creator_lock
      args: <creator_lock_hash>
      rules: Returns excess capacity to funder
    type: null
      args: null
      rules: Standard change cell
    data: null
    capacity: <excess_capacity>

HeaderDeps:
  recent-header:
    Required for transaction validity window and funding timestamp

CellDeps:
  ckboost-campaign-type-dep:
    Required for campaign type script execution and validation
    
  ckboost-campaign-lock-dep:
    Required for campaign lock script validation
    
  spore-type-dep:
    Required for NFT type script execution (if NFT assets provided)
    
  xudt-type-dep:
    Required for UDT type script execution (if UDT assets provided)
    
  secp256k1-dep:
    Required for funder signature verification

Witnesses:
  0: <creator_signature: signs transaction hash for campaign update authorization>