#!/bin/bash

# CKBoost Contract Deployment Script
# This script deploys all CKBoost contracts using ccc-deploy

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if .env file exists
if [ ! -f .env ]; then
    echo -e "${RED}Error: .env file not found!${NC}"
    echo "Please create a .env file with your WALLET_PRIVATE_KEY"
    echo "Example:"
    echo "WALLET_PRIVATE_KEY=0x..."
    echo "CKB_RPC_URL=https://testnet.ckb.dev/rpc (optional)"
    exit 1
fi

# Source environment variables
source .env

# Check if WALLET_PRIVATE_KEY is set
if [ -z "$WALLET_PRIVATE_KEY" ]; then
    echo -e "${RED}Error: WALLET_PRIVATE_KEY not found in .env file!${NC}"
    exit 1
fi

# Default network
NETWORK=${1:-testnet}

echo -e "${GREEN}Starting CKBoost contract deployment to ${NETWORK}...${NC}"

# Function to deploy a contract
deploy_contract() {
    local CONTRACT_NAME=$1
    local CONTRACT_PATH=$2
    local WITH_TYPE_ID=${3:-true}
    
    echo -e "\n${YELLOW}Deploying ${CONTRACT_NAME}...${NC}"
    
    if [ "$WITH_TYPE_ID" = "true" ]; then
        ccc-deploy deploy generic_contract ${CONTRACT_PATH} --network=${NETWORK} --outputFile=./deployment-${CONTRACT_NAME}.json
    else
        ccc-deploy deploy generic_contract ${CONTRACT_PATH} --network=${NETWORK} --no-typeId --outputFile=./deployment-${CONTRACT_NAME}.json
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ ${CONTRACT_NAME} deployed successfully${NC}"
    else
        echo -e "${RED}✗ Failed to deploy ${CONTRACT_NAME}${NC}"
        exit 1
    fi
}

# Deploy contracts
cd contracts

# Build contracts if not already built
if [ ! -d "build/release" ]; then
    echo -e "${YELLOW}Building contracts...${NC}"
    make build
fi

cd ..

# Deploy all contracts
# Note: Protocol type should be deployed with Type ID for singleton pattern
deploy_contract "protocol-type" "./contracts/build/release/ckboost-protocol-type" true
deploy_contract "protocol-lock" "./contracts/build/release/ckboost-protocol-lock" false
deploy_contract "campaign-type" "./contracts/build/release/ckboost-campaign-type" false
deploy_contract "campaign-lock" "./contracts/build/release/ckboost-campaign-lock" false
deploy_contract "user-type" "./contracts/build/release/ckboost-user-type" false

echo -e "\n${GREEN}All contracts deployed successfully!${NC}"

# Create deployment summary
echo -e "\n${YELLOW}Creating deployment summary...${NC}"

# Combine all deployment outputs into a single file
cat > deployment-summary.json << EOF
{
  "network": "${NETWORK}",
  "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "contracts": {
EOF

# Function to extract deployment info and add to summary
add_to_summary() {
    local CONTRACT_NAME=$1
    local IS_LAST=$2
    
    if [ -f "deployment-${CONTRACT_NAME}.json" ]; then
        echo "    \"${CONTRACT_NAME}\": $(cat deployment-${CONTRACT_NAME}.json)" >> deployment-summary.json
        if [ "$IS_LAST" != "true" ]; then
            echo "," >> deployment-summary.json
        fi
    fi
}

add_to_summary "protocol-type" false
add_to_summary "protocol-lock" false
add_to_summary "campaign-type" false
add_to_summary "campaign-lock" false
add_to_summary "user-type" true

echo "  }" >> deployment-summary.json
echo "}" >> deployment-summary.json

# Create .env.contracts file for dapp
echo -e "\n${YELLOW}Creating .env.contracts file for dapp...${NC}"

cat > .env.contracts << EOF
# CKBoost Contract Deployment
# Generated by deploy-contracts.sh
# Network: ${NETWORK}
# Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

# IMPORTANT: Only the protocol type script needs to be in the environment.
# All other contract addresses will be stored in the protocol cell data.

EOF

# Function to extract env vars from deployment
extract_env_vars() {
    local CONTRACT_NAME=$1
    local VAR_PREFIX=$2
    
    if [ -f "deployment-${CONTRACT_NAME}.json" ]; then
        # Extract values from JSON (using grep and sed for simplicity)
        local TYPE_CODE_HASH=$(grep -o '"typeId":[[:space:]]*{[^}]*"codeHash":[[:space:]]*"[^"]*"' deployment-${CONTRACT_NAME}.json | sed 's/.*"codeHash":[[:space:]]*"\([^"]*\)".*/\1/')
        
        if [ ! -z "$TYPE_CODE_HASH" ]; then
            echo "# Protocol Type Contract (with Type ID)" >> .env.contracts
            echo "NEXT_PUBLIC_${VAR_PREFIX}_CODE_HASH=\"${TYPE_CODE_HASH}\"" >> .env.contracts
            echo "NEXT_PUBLIC_${VAR_PREFIX}_HASH_TYPE=\"type\"" >> .env.contracts
            echo "NEXT_PUBLIC_${VAR_PREFIX}_ARGS=  # Will be filled after protocol cell deployment" >> .env.contracts
        else
            # For non-Type ID contracts, use data hash
            local CODE_HASH=$(grep -o '"dataHash":[[:space:]]*"[^"]*"' deployment-${CONTRACT_NAME}.json | sed 's/.*"dataHash":[[:space:]]*"\([^"]*\)".*/\1/')
            echo "# ${CONTRACT_NAME} (data hash)" >> .env.contracts
            echo "# Code hash: ${CODE_HASH}" >> .env.contracts
        fi
        
        echo "" >> .env.contracts
    fi
}

# Only extract protocol type script info for env
extract_env_vars "protocol-type" "PROTOCOL_TYPE"

# Add note about other contracts
echo "# Other contracts are deployed but their addresses will be stored in the protocol cell data" >> .env.contracts
echo "# See deployment-summary.json for all contract deployment details" >> .env.contracts

echo -e "${GREEN}✓ Deployment complete!${NC}"
echo -e "\nDeployment files created:"
echo "  - deployment-summary.json (all deployment info)"
echo "  - .env.contracts (environment variables for dapp)"
echo "  - deployment-*.json (individual contract deployments)"
echo -e "\n${YELLOW}Next steps:${NC}"
echo "1. Copy ONLY the protocol type script info from .env.contracts to your dapp/.env.local"
echo "2. Start the dApp and navigate to /platform-admin"
echo "3. Deploy the protocol cell with all contract code hashes from deployment-summary.json"
echo "4. Create your first campaign using the dapp interface"