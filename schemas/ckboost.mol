/* Basic Types */

// The `UintN` is used to store a `N` bits unsigned integer
// as a byte array in little endian.
array Uint32 [byte; 4];
array Uint64 [byte; 8];
array Uint128 [byte; 16];
array Byte32 [byte; 32];
array Uint256 [byte; 32];

vector Bytes <byte>;
option BytesOpt (Bytes);
vector BytesOptVec <BytesOpt>;
vector BytesVec <Bytes>;
vector Byte32Vec <Byte32>;

/* Types for Chain */

option ScriptOpt (Script);

array ProposalShortId [byte; 10];

vector UncleBlockVec <UncleBlock>;
vector TransactionVec <Transaction>;
vector ProposalShortIdVec <ProposalShortId>;
vector CellDepVec <CellDep>;
vector CellInputVec <CellInput>;
vector CellOutputVec <CellOutput>;

table Script {
    code_hash:      Byte32,
    hash_type:      byte,
    args:           Bytes,
}

struct OutPoint {
    tx_hash:        Byte32,
    index:          Uint32,
}

struct CellInput {
    since:           Uint64,
    previous_output: OutPoint,
}

table CellOutput {
    capacity:       Uint64,
    lock:           Script,
    type_:          ScriptOpt,
}

struct CellDep {
    out_point:      OutPoint,
    dep_type:       byte,
}

table RawTransaction {
    version:        Uint32,
    cell_deps:      CellDepVec,
    header_deps:    Byte32Vec,
    inputs:         CellInputVec,
    outputs:        CellOutputVec,
    outputs_data:   BytesVec,
}

table Transaction {
    raw:            RawTransaction,
    witnesses:      BytesVec,
}

struct RawHeader {
    version:                Uint32,
    compact_target:         Uint32,
    timestamp:              Uint64,
    number:                 Uint64,
    epoch:                  Uint64,
    parent_hash:            Byte32,
    transactions_root:      Byte32,
    proposals_hash:         Byte32,
    extra_hash:             Byte32,
    dao:                    Byte32,
}

struct Header {
    raw:                    RawHeader,
    nonce:                  Uint128,
}

table UncleBlock {
    header:                 Header,
    proposals:              ProposalShortIdVec,
}

table Block {
    header:                 Header,
    uncles:                 UncleBlockVec,
    transactions:           TransactionVec,
    proposals:              ProposalShortIdVec,
}

table BlockV1 {
    header:                 Header,
    uncles:                 UncleBlockVec,
    transactions:           TransactionVec,
    proposals:              ProposalShortIdVec,
    extension:              Bytes,
}

table CellbaseWitness {
    lock:    Script,
    message: Bytes,
}

table WitnessArgs {
    lock:                   BytesOpt,          // Lock args
    input_type:             BytesOpt,          // Type args for input
    output_type:            BytesOpt,          // Type args for output
}

/* Extended types */

option Byte32Opt (Byte32);
vector ScriptVec <Script>;
vector Uint128Vec <Uint128>;
array Uint8 [byte; 1];

// Schemas for CKBoost Campaign Data

table UDTFunding {
    udt_script: Script,
    amount: Uint128,
}

vector UDTFundingVec <UDTFunding>;

// Campaign funding information
table AssetList {
    ckb_amount: Uint64,        // Total funding target for the campaign
    nft_assets: ScriptVec,     // NFT assets to be managed by campaign
    udt_assets: UDTFundingVec, // UDT assets to be managed by campaign
}

vector AssetListVec <AssetList>;

table QuestSubTaskData {
    id: Uint8,
    title: Bytes,
    type: Bytes, // text, link, txhash. More types can be added in the future.
    description: Bytes,
}

vector QuestSubTaskDataVec <QuestSubTaskData>;

table CompletionRecord {
    user_address: Bytes,
    sub_task_id: Uint8,
    completion_timestamp: Uint64,
    completion_content: Bytes,
}

vector CompletionRecordVec <CompletionRecord>;

table QuestData {
    id: Byte32,
    campaign_id: Byte32,
    requirements: Bytes,
    rewards_on_completion: AssetListVec,
    completion_records: CompletionRecordVec,
    completion_deadline: Uint64,  // Optional deadline for quest completion
    status: byte,                 // 0=created, 1=active, 2=completed, 3=cancelled
    sub_tasks: QuestSubTaskDataVec,
}

vector QuestDataVec <QuestData>;

table CampaignMetadata {
    funding_info: AssetListVec,
    created_at: Uint64,
    starting_time: Uint64,
    ending_time: Uint64,
    verification_requirements: byte, // 0=none, 1=telegram, 2=identity
    last_updated: Uint64,
}

table CampaignData {
    id: Byte32,
    creator: Script,
    metadata: CampaignMetadata,
    status: byte,       // 0=created, 1=funding, 2=reviewing, 3=approved, 4=active, 5=completed
    quests: QuestDataVec,
}

vector CampaignDataVec <CampaignData>;

// Schemas for CKBoost Protocol Data

table UserVerificationData {
    user_address: Bytes,
    telegram_personal_chat_id: Uint128,
    identity_verification_data: Bytes, // TODO: Leave this part agnostic for now
}

table TippingProposalMetadata {
    contribution_title: Bytes,
    contribution_type_tags: BytesVec,
    description: Bytes,
    proposal_creation_timestamp: Uint64,
}

table TippingProposalData {
    target_address: Bytes,
    proposer_lock_hash: Byte32,
    metadata: TippingProposalMetadata,
    amount: Uint64,
    tipping_transaction_hash: Byte32Opt, 
    approval_transaction_hash: Byte32Vec, 
}

vector TippingProposalDataVec <TippingProposalData>;

table EndorserInfo {
    endorser_lock_hash: Byte32,
    endorser_name: Bytes,
    endorser_description: Bytes,
}

vector EndorserInfoVec <EndorserInfo>;

table TippingConfig {
    approval_requirement_thresholds: Uint128Vec, // e.g. [10000, 50000, 100000] means it takes 3 approvals for 10000, 4 approvals for 50000, 5 approvals for 100000. Can add more thresholds in the future. Minimum approval threshold is 3.
    expiration_duration: Uint64, // The duration of the proposal in seconds since creation.
}

table ScriptCodeHashes {
    ckb_boost_protocol_type_code_hash: Byte32,
    ckb_boost_protocol_lock_code_hash: Byte32,
    ckb_boost_campaign_type_code_hash: Byte32,
    ckb_boost_campaign_lock_code_hash: Byte32,
    ckb_boost_user_type_code_hash: Byte32,
}

table ProtocolConfig {
    admin_lock_hash_vec: Byte32Vec,
    script_code_hashes: ScriptCodeHashes,
}

table ProtocolData {
    campaigns_approved: CampaignDataVec,
    tipping_proposals: TippingProposalDataVec,
    tipping_config: TippingConfig,
    endorsers_whitelist: EndorserInfoVec,
    last_updated: Uint64,
    protocol_config: ProtocolConfig,
}

// Transaction Recipe Schema for SSRI
table TransactionRecipe {
    method_path: Bytes,           // The method path (e.g., "ckboost_protocol::update_protocol")
    arguments: BytesVec,          // Encoded arguments for the method
}